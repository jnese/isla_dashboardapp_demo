library(tidyverse)
library(lubridate)
dta <- read_csv(here::here("data", "dta.csv"))
View(dta)
library(googlesheets4)
library(tidyverse)
gs4_auth(email = "jnese@uoregon.edu")
sheet_id <- "1ZuuB21hCNHFgKeN4v9AnQuu7EamCXDx7RK_gU464ib4"
dta_raw <- read_sheet(sheet_id, sheet = "Signed_In") %>%
janitor::clean_names()
dta <- dta_raw %>%
filter(!is.na(grade)) %>%
separate(student_name, c("last", "first"), ",") %>%
mutate(student_name = paste0(first, " ", last)) %>%
select(student_name, everything()) %>%
#  select(-last, -first) %>%
mutate_at(vars(teacher_name, does_students_behavior_pose_a_safety_risk_to_them_or_others:did_the_student_reenter_the_classroom),
~na_if(., "")) %>%
mutate(teacher_name = replace_na(teacher_name, "missing")) %>%
mutate(time_in = na_if(time_in, "Never Signed In")) %>%
mutate(time_out = na_if(time_out, "Never Signed Out")) %>%
unnest(cols = c(time_in, time_out)) %>%
mutate(time_lost = lubridate::int_length(lubridate::interval(time_in, time_out))/60,
date = lubridate::as_date(time_in)) %>%
drop_na(grade) %>%
mutate(what_happened = ifelse(!is.na(what_happened), "[teacher report of what happened]", NA_character_),
notes = ifelse(!is.na(notes), "[ISLA facilitator notes]", NA_character_))
anon_names <- readxl::read_excel(here::here("nopublish", "anon_names.xlsx"), sheet = "names") %>%
mutate(teacher_anon = str_trim(teacher_anon, side = "both"),
student_anon = str_trim(student_anon, side = "both"))
dta <- tibble(
teacher_name = unique(dta$teacher_name),
teacher_anon = pull(filter(anon_names, !is.na(teacher_anon)), teacher_anon)
) %>%
right_join(dta) %>%
select(-teacher_name) %>%
rename(teacher_name = teacher_anon)
dta <- tibble(
student_name = unique(dta$student_name),
student_anon = pull(filter(anon_names, !is.na(student_anon)), student_anon)
) %>%
right_join(dta) %>%
select(-c(student_name, last, first)) %>%
rename(student_name = student_anon)
rio::export(dta, here::here("data", "dta.csv"))
dta <- read_csv(here::here("data", "dta.csv"))
View(dta)
install.packages('rsconnect')
rsconnect::setAccountInfo(
name='islaproject',
token='74ECCC5819323C7859EA5629654BD742',
secret='guSHs8WiEAf13Pt94etQ+yp22yVBLbs7Xsbp4iIp')
library(rsconnect)
?rsconnect::deployApp
here::here()
rsconnect::deployApp(here::here())
rsconnect::deployApp("C:/Users/jnese/Desktop/BRT/GRANT-ISLA/GRANT-ISLA/Project/isla_dashboardapp_demo")
rsconnect::deployApp("C:/Users/jnese/Desktop/BRT/GRANT-ISLA/GRANT-ISLA/Project/isla_dashboardapp_demo",
appTitle = "ISLA Demo Dashboard")
library(rsconnect)
rsconnect::deployApp("C:/Users/jnese/Desktop/BRT/GRANT-ISLA/GRANT-ISLA/Project/isla_dashboardapp_demo",
appTitle = "ISLA Demo Dashboard")
library(shiny); runApp('isla_shinyapp_demo.R')
dta
dta %>%
mutate(entry_hour = paste0(as.character(hour(time_in)), "am")
)
dta %>%
mutate(entry_hour = paste0(as.character(hour(time_in)), "am"),
entry_hour = recode(entry_hour,
"12am" = "12pm",
"13am" = "1pm",
"14am" = "2pm",
"15am" = "3pm",
"16am" = "4pm",
"NAam" = "Missing"),
entry_hour = as_factor(entry_hour),
entry_hour = fct_relevel(entry_hour, "7am", "8am", "9am", "10am", "11am", "12pm", "1pm", "2pm", "3pm", "4pm")) %>%
group_by(entry_hour) %>%
summarize(mean_minutes = mean(time_lost, na.rm = TRUE))
a %>%
mutate(entry_hour = paste0(as.character(hour(time_in)), "am")) %>% janitor::tabyl(entry_hour)
dta %>%
mutate(entry_hour = paste0(as.character(hour(time_in)), "am")) %>% janitor::tabyl(entry_hour)
table(data$time_in)
table(dta$time_in)
table(hour(dta$time_in))
table(lubridate::hour(dta$time_in))
str(dta$time_in)
as_datetime(head(dta$time_in))
hour(as_datetime(head(dta$time_in)))
dta %>%
mutate(entry_hour = paste0(as.character(as_datetime(hour(time_in))), "am")) %>% janitor::tabyl(entry_hour)
dta %>%
mutate(entry_hour = paste0(as.character(hour(as_datetime(time_in))), "am")) %>% janitor::tabyl(entry_hour)
sum(is.na(dta$time_in))
dta %>%
mutate(entry_hour = paste0(as.character(hour(as_datetime(time_in))), "am")) %>%
filter(entry_hour == "NAam")
dta %>%
mutate(entry_hour = paste0(as.character(hour(as_datetime(time_in))), "am")) %>%
filter(entry_hour == "NAam") %>% View()
dta %>%
mutate(entry_hour = hour(as_datetime(time_in)))
dta %>%
mutate(entry_hour = hour(as_datetime(time_in))) %>% View()
str("2020-02-20T14:29:40.:00Z")
as_datetime("2020-02-20T14:29:40.:00Z")
library(anytime)
install.packages("anytime")
library(anytime)
anytime("2020-02-20T14:29:40.:00Z")
anytime("2019-11-21T10:49:06Z")
dta %>%
mutate(entry_hour = hour(anytime::anytime(time_in)))
dta %>%
mutate(entry_hour = hour(anytime::anytime(time_in))) %>% View()
dta %>%
mutate(entry_hour = paste0(as.character(hour(anytime::anytime(time_in))), "am")) %>%
entry_hour = recode(entry_hour,
"12am" = "12pm",
"13am" = "1pm",
"14am" = "2pm",
"15am" = "3pm",
"16am" = "4pm",
"NAam" = "Missing"),
entry_hour = as_factor(entry_hour),
entry_hour = fct_relevel(entry_hour, "7am", "8am", "9am", "10am", "11am", "12pm", "1pm", "2pm", "3pm", "4pm")) %>%
group_by(entry_hour) %>%
summarize(mean_minutes = mean(time_lost, na.rm = TRUE)) %>%
drop_na() %>%
mutate(fillr = ifelse(entry_hour == "Missing", "gray70", "#009E73")) %>%
ggplot(aes(entry_hour, mean_minutes, fill = fillr)) +
geom_col(fill = "#009E73") +
theme_minimal(base_size = 24) +
scale_fill_identity() +
theme(legend.position = "none") +
labs(x = "",
y = "Average Minutes in Room")
dta %>%
mutate(entry_hour = paste0(as.character(hour(anytime::anytime(time_in))), "am"),
entry_hour = recode(entry_hour,
"12am" = "12pm",
"13am" = "1pm",
"14am" = "2pm",
"15am" = "3pm",
"16am" = "4pm",
"NAam" = "Missing"),
entry_hour = as_factor(entry_hour),
entry_hour = fct_relevel(entry_hour, "7am", "8am", "9am", "10am", "11am", "12pm", "1pm", "2pm", "3pm", "4pm")) %>%
group_by(entry_hour) %>%
summarize(mean_minutes = mean(time_lost, na.rm = TRUE)) %>%
drop_na() %>%
mutate(fillr = ifelse(entry_hour == "Missing", "gray70", "#009E73")) %>%
ggplot(aes(entry_hour, mean_minutes, fill = fillr)) +
geom_col(fill = "#009E73") +
theme_minimal(base_size = 24) +
scale_fill_identity() +
theme(legend.position = "none") +
labs(x = "",
y = "Average Minutes in Room")
## app.R ##
library(shiny)
library(shinydashboard)
library(shinythemes)
library(tidyverse)
library(DT)
library(reactable)
library(htmltools)
library(shinyWidgets)
source(here::here("functions_stu.R"))
source(here::here("functions_sch.R"))
source(here::here("data_prep_anon.R"))
# https://stackoverflow.com/questions/33503119/use-infobox-from-shinydashboard-into-shiny
addDeps <- function(x) {
if (getOption("shiny.minified", TRUE)) {
adminLTE_js <- "app.min.js"
adminLTE_css <- c("AdminLTE.min.css", "_all-skins.min.css")
} else {
adminLTE_js <- "app.js"
adminLTE_css <- c("AdminLTE.css", "_all-skins.css")
}
dashboardDeps <- list(
htmlDependency("AdminLTE", "2.0.6",
c(file = system.file("AdminLTE", package = "shinydashboard")),
script = adminLTE_js,
stylesheet = adminLTE_css
),
htmlDependency("shinydashboard",
as.character(utils::packageVersion("shinydashboard")),
c(file = system.file(package = "shinydashboard")),
script = "shinydashboard.js",
stylesheet = "shinydashboard.css"
)
)
shinydashboard:::appendDependencies(x, dashboardDeps)
}
ui <- navbarPage("ISLA Dashboard 2.0", theme = shinytheme("flatly"),
tabPanel("School", icon = icon("school"),
sidebarPanel(width = 3,
radioButtons("grade_level", "Select grade:", choices = c("All" = "All",
"Grade 6" = "6",
"Grade 7" = "7",
"Grade 8" = "8")),
dateRangeInput("sch_daterange", "Select the date range:",
start = min_date, end = max_date, min = min_date, max = max_date)
),
mainPanel(
tabsetPanel(type = "pills",
tabPanel("ISLA", icon = icon("check-square-o"),
fluidRow(
box(title = "ISLA Fidelity",
plotOutput("sch_fidelity_plot"),
downloadButton(outputId = "sch_fidelity_dl", ####
label = "Download the plot"), ###########
width = 12),
box(title = "Did the student Re-enter the Classroom?",
plotOutput("sch_reenter_plot"),
downloadButton(outputId = "sch_reenter_dl", ####
label = "Download the plot"), ###########
width = 12),
box(title = "If No Re-entry, Why?",
plotOutput("sch_whynoreentry_plot"),
downloadButton(outputId = "sch_whynoreentry_dl", ####
label = "Download the plot"), ###########
width = 12),
box(title = "",
plotOutput("sch_adminsafety_plot"),
downloadButton(outputId = "sch_adminsafety_dl", ####
label = "Download the plot"), ###########
width = 12)
)
),
tabPanel("Incidents", icon = icon("list-ol"),
fluidRow(
valueBoxOutput("sch_totalincidents_box", width = 6),
valueBoxOutput("sch_totalstudents_box", width = 6),
shinyWidgets::radioGroupButtons("sch_incidents_plotselect", "Select Plot:",
choices = c("Monthly", "Daily", "Time of day", "Day of week"),
selected = "Monthly",
direction = "horizontal",
justified = TRUE,
individual = TRUE,
checkIcon = list(
yes = icon("check-square")),
#inline = TRUE,
width = '100%',
),#
box(title = "Number of Student in Room",
plotOutput("sch_incidents_time_plot"),
downloadButton(outputId = "sch_incidents_time_dl", ####
label = "Download the plot"), ###########
width = 12)
)
),
tabPanel("Instructional Time Lost", icon = icon("stopwatch"),
fluidRow(
valueBoxOutput("sch_totalhourslost_box", width = 6),
valueBoxOutput("sch_aveminslost_box", width = 6),
shinyWidgets::radioGroupButtons("sch_minslost_plotselect", "Select Plot:",
choices = c("Monthly", "Daily", "Time of day", "Day of week"),
selected = "Monthly",
direction = "horizontal",
justified = TRUE,
individual = TRUE,
checkIcon = list(
yes = icon("check-square")),
#inline = TRUE,
width = '100%',
),#
box(title = "Average Minutes in Room",
plotOutput("sch_minslost_time_plot"),
downloadButton(outputId = "sch_minslost_time_dl", ####
label = "Download the plot"), ###########
width = 12)
)
),
tabPanel("People", icon = icon("hands-helping"),
fluidRow(
box(title = "Most Incidents by Student",
plotOutput("sch_incidstu_plot"),
width = 6),
box(title = "Most Incidents by Teacher",
plotOutput("sch_incidtch_plot"),
width = 6)
),
fluidRow(
box(title = "Relationships",
DTOutput("sch_relationships_table"),
width = 12)
)
)
)
)
),
tabPanel("Student", icon = icon("user"),
sidebarPanel(width = 3,
selectInput("student_name", "Student Name:", choices = student_name),
dateRangeInput("stu_daterange", "Select the date range",
min = min_date, max = max_date,
start = min_date, end = max_date),
dateInput("intervention1", "Select intervention start date")
),
mainPanel(
tabsetPanel(type = "pills",
tabPanel("Time out of class", icon = icon("stopwatch"),
fluidRow(
valueBoxOutput("stu_totalincidents_box", width = 6),
valueBoxOutput("stu_totalminslost_box", width = 6)
),
fluidRow(
box(title = "Minutes in Room by Date",
plotOutput("stu_timelost_plot"),
downloadButton(outputId = "stu_timelost_plot_dl", ####
label = "Download the plot"), ###########
width = 12)
),
fluidRow(
box(DTOutput("stu_timelost_table"),
width = 12)
)
),
tabPanel("ISLA Fidelity", icon = icon("check-square-o"),
fluidRow(
box(plotOutput("stu_fidelity_plot"),
downloadButton(outputId = "stu_fidelity_plot_dl", ####
label = "Download the plot"), ###########
width = 12)
),
fluidRow(
box(DTOutput("stu_fidelity_table"),
width = 12)
)
)
)
)
),
tabPanel("Data", icon = icon("table"),
mainPanel(
fluidRow(
column(title = "Data from Google Sheet",
reactableOutput("completedata_table"),
width = 12)
)
)
)
)
ui <- addDeps(
tags$body(shiny::fluidPage(ui)
)
)
server <- function(input, output) {
# SCHOOL
output$sch_totalincidents_box <- renderValueBox({valueBox(
sch_totalincidents_box_fx(input),
"Total Incidents",
icon = icon("door-open"),
color = "yellow",
)})
output$sch_totalstudents_box <- renderValueBox({valueBox(
sch_totalstudents_box_fx(input),
"Total Students",
icon = icon("users"),
color = "orange",
)})
output$sch_incidents_time_plot <- renderPlot(sch_incidents_time_plot_fx(input))
#### new
output$sch_incidents_time_dl <- downloadplot_sch_fx("Number_of_Student_in_Room",
input,
sch_incidents_time_plot_fx,
input$grade_level,
input$sch_daterange)            ##############################
output$sch_totalhourslost_box <- renderValueBox({valueBox(
sch_totalhourslost_box_fx(input),
"Total Hours Lost",
icon = icon("clock"),
color = "light-blue",
)})
output$sch_aveminslost_box <- renderValueBox({valueBox(
sch_aveminslost_box_fx(input),
"Average Mins in Room",
icon = icon("stopwatch"),
color = "blue",
)})
output$sch_minslost_time_plot <- renderPlot(sch_minslost_time_plot_fx(input))
#### new
output$sch_minslost_time_dl <- downloadplot_sch_fx("Average_Minutes_in_Room",
input,
sch_minslost_time_plot,
input$grade_level,
input$sch_daterange)            ##############################
output$sch_incidstu_plot <- renderPlot(sch_incidstu_plot_fx(input))
output$sch_incidtch_plot <- renderPlot(sch_incidtch_plot_fx(input))
output$sch_relationships_table <- renderDT(sch_relationships_table_fx(input))
output$sch_fidelity_plot <- renderPlot(sch_fidelity_plot_fx(input))
#### new
output$sch_fidelity_dl <- downloadplot_sch_fx("ISLA_Fidelity",
input,
sch_fidelity_plot_fx,
input$grade_level,
input$sch_daterange)            ##############################
output$sch_reenter_plot <- renderPlot(sch_reenter_plot_fx(input))
#### new
output$sch_reenter_dl <- downloadplot_sch_fx("Did_the_student_Re-enter_the_Classroom",
input,
sch_reenter_plot_fx,
input$grade_level,
input$sch_daterange)            ##############################
output$sch_whynoreentry_plot <- renderPlot(sch_whynoreentry_plot_fx(input))
#### new
output$sch_whynoreentry_dl <- downloadplot_sch_fx("If_No_Re-entry_Why",
input,
sch_whynoreentry_plot_fx,
input$grade_level,
input$sch_daterange)            ##############################
output$sch_adminsafety_plot <- renderPlot(sch_adminsafety_plot_fx(input))
#### new
output$sch_adminsafety_dl <- downloadplot_sch_fx("Sent_to_Admin_and-or_Safety_Risk",
input,
sch_adminsafety_plot_fx,
input$grade_level,
input$sch_daterange)            ##############################
# STUDENT
output$stu_totalincidents_box <- renderValueBox({valueBox(
stu_totalincidents_box_fx(input),
"Total Incidents",
icon = icon("door-open"),
color = "yellow"
)})
output$stu_totalminslost_box <- renderValueBox({valueBox(
stu_totalminslost_box_fx(input),
"Total Minutes Lost",
icon = icon("stopwatch"),
color = "orange"
)})
output$stu_timelost_plot <- renderPlot(stu_timelost_plot_fx(input)) #stu_timelost_plot
#### new
output$stu_timelost_plot_dl <- downloadplot_stu_fx("Minutes_in_Room_by_Date",
input,
stu_timelost_plot_fx,
input$student_name,
input$stu_daterange) ##############################
output$stu_timelost_table <- renderDT(stu_timelost_table_fx(input))
output$stu_fidelity_plot <- renderPlot(stu_fidelity_plot_fx(input)) #stu_fidelity_plot_dl
#### new
output$stu_fidelity_plot_dl <- downloadplot_stu_fx("ISLA_Fidelity",
input,
stu_fidelity_plot_fx,
input$student_name,
input$stu_daterange) ##############################
output$stu_fidelity_table <- renderDT(stu_fidelity_table_fx(input))
# Data
output$completedata_table <- renderReactable(completedata_table)
}
shinyApp(ui, server)
